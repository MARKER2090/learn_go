笔记 ：
for就是一个内存共享的，所以for循环里面，赋值某个数值都是最后一个数值；
可以理解为for遍历某个变量，都是放在一个桶里面；

后端工程师必备能力：
操作系统：
- 内存管理：将GO内存管理、linux内存管理融会贯通
- 文件系统：能够理解各种中间件为了优化IO的锁所采取的措施
计算机网络：TCP，学到你能理解linux上TCP所有的相关参数，以及如何调优的地步
数据库原理：搞懂MYSQL各个参数的含义，以及优化的方向 就可以了
计算机组成原理：看懂汇编，能够从计算机指令级别解释各种原子操作即可
分布式系统：
通信：怎么通信，RPC调用，HTTP调用等，通信出现的问题

计算中文个数：
println(utf8.RuneCountInString("你好"))
字符串处理：
使用strings包就可以了。

==================
middleware中间件的理解：
如果看到控制台上出现“CORS"就是代表着遇到了跨域问题了。
一般全部都是浏览器的拦截。
理解：
举例子：浏览器会对端口不同的情况拦截，然后询问我是否需要进行接收，也就是先询问我要不要。
我就是需要制定对应的通过规则，让浏览器知道（那些我制定的规则）是代表我要的。
跨域问题：
1. 协议不一样：http和https
2. 域名不一样：
3. 端口不一样：3000和8082

中间件：解决跨域问题
插件库网址：https://github.com/gin-gonic/contrib  
网站上有很多插件是可以解决各种跨域问题的，但是要注意有部分是有并发问题的。需要谨慎
https://github.com/gin-gonic/contrib/cors就是用来解决cors问题的

==================
Service-Repostiory-DAO三层结构:
领域的界限也业务大小有关
service：代表domain service领域服务
repository：领域服务的存储
dao：代表的是数据库操作
domain：代表领域对象

调用流程：web（和http打交道）——>service(主要业务逻辑)——>repository（数据存储对象)——>dao(数据库操作)

==================
docker相关知识：

docker基础知识：
docker version:版本号
docker info：关于本机上docker的所有信息
docker --help：docker的具体命令
docker images或者docker image ls：列出本地仓库里的docker镜像列表
docker pull redis:从互联网拉取一个redis镜像到本地仓库里
docker pull redis:8.0	就是拉取一个8.0版本的redis，如果不添加版本号就是默认拉取最新版本
如果想要指定的版本，就需要去docker hub上进行查看了。
docker search redis	就是通过命令行的形式搜索redis镜像，不用自己到docker hub上进行苦苦查找了。但是，是没有版本号的，只能说检验有没有这个镜像，想要特定的版本号还是需要自己通过官网去搜索查找具体的版本号

普通删除：docker image rm (镜像名字)|(镜像id),这种如果遇到镜像运行过的了，是删除不了的。
强制删除：docker image rm -f (镜像名字)|(镜像id)

docker image redis : 只列出和redis相关的镜像
docker image redis -q:只列出和redis相关的镜像的id

运行镜像
image是镜像，只要通过docker运行之后，就成为了容器container
docker run -p 3660:8080 redis:3.0
命令解释：进行运行redis3.0版本的，然后是通过宿主机的3660映射到docker上的8080,也就是通过系统上浏览器访问http://localhost:3660就可以访问到docker里面运行的tomcat容器了。(亲测成功)理解顺序就是从左到右，机器本身才是大环境，docker是在大环境里面的，我们通过大环境的3360直接到docker的8080

docker课程知识：
docker compose up -d 后台启动
docker compose up 就是直接启动
如何访问docker的mysql？
在docker-desktop软件上，找到对应的mysql81-1,三个点那里，open in the terminal,进入命令行，输入
mysql -uroot -p，然后密码是root（通过docker-compose.yaml文件查看）
一进入后，需要输show databases;（注意分号）来查看数据库情况，然后输入
use smartbook;
select * from user;
就可以查看到存储的账号密码了。

-----------------------
docker-compose.yaml文件的理解：
以下是自己的文件的内容
version: '3.0'
services:
  mysql8:
    image: mysql:8.0.29
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      # 设置初始化脚本
      - ./script/mysql/:/docker-entrypoint-initdb.d/
    ports:
      # 13316是我自己的端口，3306是docker暴露给我的端口
# 13316是自己的main.go文件里面的gorm采用了mysql后采用的mysql的端口，我们通过13316可以不借助任何的其他软件就可以访问得到自己的mysql数据库的内容；
# 3306是docker对于mysql端口的映射，可以理解是找docker说要访问mysql，就通过docker给出的3306端口就可以访问到了自己的mysql数据库(对应13316端口)了。 
      - "13316:3306"
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'


----------------------

BCrypt加密：号称最安全的加密算法
优点：
1.不需要自己生成盐值
2.不需要额外的存储盐值
3.可以通过控制cost来控制加密性能
4.同样的文本，加密的结果不同
需要用到golang.org/x/crypto

cookie的理解：
name:
value:
path:在那条路径下生效
domain:在哪里生效
expires:cookies什么时候过期
rawexpires:原始的数据
maxage:cookie最多保存多长时间
secure:bool，如果是true就只能是https访问(生产环境永远为true)
httponly:只在在浏览器访问的时候带上去，自己通过js脚本就访问不了(生产环境永远为true)
samesite:。。。
raw:...
unparsed:...

课件上的说明：
Domain: 也就是 Cookie 可以用在什么域名下，按照最小化原则来设定。
Path：Cookie 可以用在什么路径下，同样按照最小化原则来设定。
Max-Age 和 Expires：过期时间，只保留必要时间。
Http-Only：设置为 true 的话，那么浏览器上的 JS 代码将无法使用这个 Cookie。永远设置为 true。
Secure：只能用于 HTTPS 协议，生产环境永远设置为 true。
SameSite：是否允许跨站发送 Cookie，尽量避免。

cookie不安全所以不会存数据敏感的内容，都是存一些无关要紧的东西
session都是存放数据敏感的的内容
session插件：https://github.com/gin-contrib/sessions

让服务器识别是不是你自己的方法就是通过存在的sess_id来进行判断
sess_id最佳的放置地方就是cookie里，但是如果国外的比较注重隐私的话，有些网站是不允许使用cookie的，就只能放在Header上了，也可以考虑放在query上
sess_id存放的地方：
1.cookie
2.header
3.query

通过函数提取到了cookie里面的sess_id之后，

==========================
K8S初认识：
k8s就是管理容器的，我们通过容器发布应用，如果发布得多了，就需要一个管理者，k8s就是了。
我们需要将应用打包成为一个可以在linux环境下运行的应用，然后通过docker命令来打包到容器中，通过k8s的deployment配置文件来告诉k8s的deployment来管理我们的已经打包好可运行的应用。
==========================
安装k8s
命令行输入以下内容：
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
EOF

sudo yum install -y kubectl

==========================
然后就需要一个Dockerfile文件
文件内容如下：
# 基础镜像:fedora
FROM fedora

# 拷贝smartbook可执行文件（linux环境下的）到/app文件夹内，其实app文件夹不写死，也可以放在/user/local文件夹下的
COPY smartbook /app/smartbook
# 工作目录是/app
WORKDIR /app

# CMD是执行命令
# ENTRYPOINT是最佳实践
ENTRYPOINT ["/app/smartbook"]

==========================
如果逐个敲代码的话，可以使用make文件来进行脚本的构建（如果没有安装make，就需要sudo yum install make)
window环境下安装make比较麻烦！
makefile内容如下：(linux环境下)
.PHONY: docker
docker:
	@rm webook || true
	@go build -tags=k8s -o webook .
	@docker rmi -f deyen/smartbook:v0.0.1
	@docker build -t deyen/smartbook-live:v0.0.1 .

命令行解释：
.PHONY可以理解为名称的意思，如果是.PHONY: docker，在执行命令的时候就要写make docker;如果是.PHONY: AAA，在命令行里面就要写make AAA。(经过自己的验证，好像也不是那么一回事)
-tags 参数就是带有标签的意思;
makefile内容如下：(window环境下)
.PHONY: docker
docker:
	@rm webook || true
	@GOOS=linux GOARCH=arm go build -tags=k8s -o webook .
	@docker rmi -f deyen/smartbook:v0.0.1
	@docker build -t deyen/smartbook-live:v0.0.1 .

通过make docker来执行makefile文件

注意：如果重复构建的话，docker-desktop上的应用那个创建时间依然是之前开始构建的时间，如果对应用内代码进行了小改动，才会被docker-desktop认为是新的应用
==========================

启动kubernetes
将应用打包成docker的应用后，利用kubernetes进行部署，需要提前写好deployments.yaml文件
然后命令行输入kubectl apply -f k8s-smartbook-deployments.yaml
通过kubectl get deployments，查看自己已经启动的”运维“，也就是pods们的管理者deloyments
通过kubectl get pods，查看自己已经启动的pods容器（一个容器可以装很多个应用服务）
下面是实时代码显示：
[deyen@deyen smartbook]$ kubectl get pods
NAME                         READY   STATUS    RESTARTS   AGE
smartbook-5567f7bd6f-79kqc   1/1     Running   0          28s
smartbook-5567f7bd6f-8tlnj   1/1     Running   0          29s
smartbook-5567f7bd6f-bqwb2   1/1     Running   0          27s

==========================
deployments文件内关键字说明：
apiVersion是说明
spec是specification规格说明，可以理解为说明书
• replicas：值为 3，也就是我这个 Deployment 有三个副本，实际上就是三个 Pod。
• selector：筛选器，就是在 K8s 的一大堆 Pod 里面，我怎么知道哪些是我管理的那三个。在我的deployments文件里，只要管理带有smart值的app标签就行了
• template：我该怎么创建每个 Pod，或者说每个Pod 长什么样。有了 template（模板），我就可以照猫画虎直接创建出来了。

==========================
service文档：
说明：单纯一个deployments文件是无法通过外面访问的，需要封装pods为逻辑上的服务，也就是service。
注意：service文件上的targetport端口要和deployments上的port端口，和smartbook应用里的Gin配置的端口一致，也就是自定义的8082

==========================
一般公司部署的kubernetes，都是外面使用https来访问，然后内部通信使用http的，很少内部也会使用https的
访问自己部署的kubernetes的端口问题：
通过命令行检查自己的service
[deyen@deyen smartbook]$ kubectl get service
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP        6d16h
smartbook    NodePort    10.98.116.41   <none>        81:30379/TCP   128m

可以看得出自己的smartbook应用PORT里有81和30379端口，在service的yaml文件里,代码如下:
apiVersion: v1
kind: Service
metadata:
  # 代表的是我们的smartbook本体
  name: smartbook
  # 说明书
spec:
  #type: LoadBalancer
  type: NodePort
  selector:
    app: smartbook
  ports:
    - name: http
      protocol: TCP
        # 81是kubernetes暴露在外部的端口，通过外部的81端口访问会直接对接到容器里面的8082端口
      port: 81
      targetPort: 8082

在以上的type设置里面，如果是LoadBalancer，就是需要通过http://localhost:81/hello来访问自己的应用；
如果是NodePort的话，就需要通过30379端口来访问，也就是通过http://loaclhost:30379/hello。该端口通过kubectl get service来查看smartbook的PORT来查看端口81:30379,81是loadbalancer端口的，30379是NodePort的。

命令：kubectl logs smartbook-5567f7bd6f-7zhb9，就可以查看smartbook-5567f7bd6f-7zhb9这个pod的日志了。

smartbook-5567f7bd6f-7zhb9的由来：
通过命令行输入：kubectl get pods来查看所有的pods，就可以查看到对应的某个pod的名称了。


==========================
k8s删除应用的命令
kubectl delete deployment smartbook
kubectl delete service smartbook

==========================
kubernetes部署Mysql
注意：k8s-mysql-deployment.yaml和k8s-mysql-service.yaml里面的app的名称是一一对应的

端口方面的理解：
用户/需要调用到myqsl的程序————service(端口是11307)————pods（端口是3306）
11307是service暴露给外面去访问的端口，而3306是pods暴露给mysql的端口
deployment文件里面的端口要对应pods上的端口，也就是3306

==========================
持久化卷
pvc => PersistenVolumeClaim可以理解为自己的mysql需要什么样子的持久化卷，而pv就是k8s可以提供的什么样子的持久化卷服务，然pvc和pv进行匹配用。
pvc就是提出自己对持久化卷的要求，pv就是查找符合pvc要求的持久化卷出来给pvc用



==========================
ingress路由规则
概念：
1.ingress路由规则的配置文件
2.ingress controller执行路由规则配置文件的
理解：client上面的请求到达了ingress controller，然后它就会转发到对应的流量到service上，service再转到对应的pods上
同样的ingress可以通过不同的controller来实现

通过下面命令来安装helm
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

使用helm安装ingress-nginx，命令如下：（实测报错）
helm upgrade --install ingress-nginx ingress-nginx \
--repo https://kubernetes.github.io/ingress-nginx \
--namespace ingress-nginx --create-namespace

如果按照上面个的方式安装不了helm和ingress-nginx的话，就通过下面的教程去看看，还没实测
https://www.cnblogs.com/syushin/p/15271304.html

k8s就是一个局域网，局域网内的各个部件是通过端口进行互联互通的

==========================
go build上的一些技巧：
在go文件里，使用标签，可以编译不同的文件
文件内代码如下：
//go:build k8s

package config

(代码省略)......abcabc

上面的代码是一个config包，里面的标签是k8s，所以在编译的时候，使用go build tags=k8s main.go的时候
go会根据标签来进行检查，检查到是k8s的标签，才会使用这个包，否则就会使用其他的包来进行编译
为了不混淆，另外一个config文件可以这样子打标签，文件内容如下：
//go:build !k8s

package config

......

这个就是go build main.go的时候默认编译用到的config包。这个包的标签是非k8s的就行。

==========================
性能瓶颈：
1.加密算法
2.数据库查询

==========================
依赖注入：
层层导入，就是依赖注入法，smartbook包里面的内容就是非常标准的依赖注入方法。


=========================
单元测试：
（熟能生巧，多写就行了）
测试的编写：
• 文件名以 _test.go 结尾。
• 测试方法以 Test 为开头。
• 测试方法只接收一个参数： t *testing.T。
使用 go test 命令：
• go test your_test.go: 这是跑单一一个文件的测试，
但你需要把 your_test.go 里面用到的文件都选进来。
右图就是忘了把其它文件都包进来。一般不用这个
形式。
• go test . :运行这个包的测试，里面所有的测试都会
执行。
• go test ./... : 运行这个包的测试，包括子目录的。
